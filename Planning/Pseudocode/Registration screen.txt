CLASS ResgisterScreen(Scene)
    SUBROUTINE init(self, window, resolution, socket <-- None)
        self.backbuttonPressed <-- False
        self.registered <-- False
        self.__submitButtonPressed <-- False

        boxFont <-- pygame font object size 36
        boxColourActive <-- (40,40,40)
        boxColourInactive <-- (25,25,25)

        boxRectSize <-- (625, 60)
        
        self.__usernameBox <-- InputBox object
        self.__passwordBox <-- InputBox object
        self.__confirmBox <-- InputBox object

        self._listOfBoxObjects <-- [self.__usernameBox, self.__passwordBox, self.__confirmBox]

        buttonSize <-- (300,60)

        self.__backButton <-- Button object
        self.__submitButton <-- Button object

        self._listOfButtonObjects = [self.__backButton, self.__submitButton]

        #Username text
        textFont <-- pygame font object with size 36
        self.__usernameText <-- Text object
        self.__passwordText <-- Text object
        self.__confirmText <-- Text object

        self._listOfTextObjects <-- [self.__usernameText, self.__passwordText, self.__confirmText]
    ENDSUBROUTINE

    SUBROUTINE main()
        FOR button IN self._listOfButtonObjects
            IF button.clicked THEN
                IF button = self.__backButton THEN
                    self.backbuttonPressed <-- True
                ELSE IF button = self.__submitButton THEN
                    IF self.__passwordBox.text = self.__confirmBox.text THEN
                        self.socket.msgsToSend.APPEND("!REGISTER:" + self.__usernameBox.text + "," + self.__passwordBox.text)
                        self.self.__submitButtonPressed <-- True
                    ELSE
                        self.__submitButtonPressed <-- False
                        button.clicked <-- False
                        FOR box IN self._listOfBoxObjects
                            box.text <-- ""
                        ENDFOR
                    ENDIF
                ENDIF
            ENDIF
        ENDFOR

        WHILE self.__submitButtonPressed AND NOT self.registered
            self.__HandleMessages()
        ENDWHILE
    ENDSUBROUTINE

    SUBROUTINE __HandleMessages(self)
        i <-- 0
        WHILE i < LEN(self.socket.receivedMsgs)
            IF self.socket.receivedMsgs[i] = "!REGISTEREDSUCCESFULLY" THEN
                self.registered <-- True
                self.socket.receivedMsgs.POP(i)
            ELSE IF self.socket.receivedMsgs[i] = "!ANERROROCCURRED" THEN
                reset scene so that it waits for user to try again            
            ELSE
                i <-- i + 1
            ENDIF
        ENDWHILE
    ENDSUBROUTINE

    SUBROUTINE _HandleInputs(self)
        inherit from Scene
        i <-- 0
        WHILE i < LEN(self._inputHandler.inputsList)
            IF input is a click THEN
                IF click location is in a box THEN
                    set box to active
                ELSE
                    set box to inactive
                ENDIF
                IF click location is in a button THEN
                    set button to clicked
                ENDIF
                remove input from list of inputs
            ELSE IF input is a keypress THEN
                IF key is a normal letter THEN 
                    IF a box is active THEN
                        add letter to active box
                    ENDIF
                ENDIF
                remove input from list of inputs
            ELSE IF input is the tab key THEN
                change activetext to the next one down or the first if the active box is the bottom one
            ELSE
                i <-- i + 1
            ENDIF
        ENDWHILE
    ENDSUBROUTINE
ENDCLASS