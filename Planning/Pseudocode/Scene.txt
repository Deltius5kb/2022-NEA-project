CLASS Scene
    SUBROUTINE init(self, window, resolution, socket <-- None)
        self.userQuit <-- False
        self.socket <-- socket

        self._shift <-- False
        self._alt <-- False
        self._ctrl <-- False
        self._backspace <-- False

        self._timeSinceLastBackspace <-- 0

        self._listOfBoxObjects <-- []
        self._listOfButtonObjects <-- []
        self._listOfTextObjects <-- []

        self._window <-- window
        self._resolution <-- resolution

        self._clock <-- pygame Clock object
        self._inputHandler <-- InputHandler object

        self._backgroundSurface <-- Black surface object which is the full screen in dimensions
        draw self._backgroundSurface onto self._window
    ENDSUBROUTINE

    SUBROUTINE main(self)
        self._timeSinceLastBackspace <-- self._timeSinceLastBackspace + time since last frame
        
        self._HandleInputs()

        IF self._backspace AND self._timeSinceLastBackspace ><-- 50 THEN
            FOR box IN self._listOfBoxObjects
                IF box.isActive THEN
                    box.RemoveLetter(self._ctrl)
                ENDIF
            ENDFOR
            self._timeSinceLastBackspace <-- 0
        ENDIF 

        FOR button in self._listOfButtonObjects
            IF button.CheckForCollision(mouse location) THEN
                button.SetActive()
            ELSE
                button.SetInactive()
            ENDIF
        ENDFOR
    
        self._Render()
    ENDSUBROUTINE

    SUBROUTINE _Render(self)
        draw self._backgroundSurface on self._window
        FOR box in self._listOfBoxObjects
            box.Render(self._window)
        ENDFOR

        FOR button in self._listOfButtonObjects
            button.Render(self._window)
        ENDFOR
        
        FOR text in self._listOfTextObjects
            text.Render(self._window)
        ENDFOR
    ENDSUBROUTINE

    SUBROUTINE _HandleInputs(self)
        self._inputHandler.CheckInputs()
        i <-- 0
        WHILE i < LEN(self.InputHandler.inputsList)
            IF self._inputHandler.inputsList[i] = "QUIT" THEN
                self.userQuit <-- True
                self._inputHandler.inputsList.POP(i)
            ELSE IF self._inputHandler.inputsList[i] = "SHIFTDOWN" THEN
                self._shift <-- True
                self._inputHandler.inputsList.POP(i)
            ELSE IF self._inputHandler.inputsList[i] = "SHIFTUP" THEN
                self._shift <-- False
                self._inputHandler.inputsList.POP(i)
            ELSE IF self._inputHandler.inputsList[i] = "ALTDOWN" THEN
                self._alt <-- True
                self._inputHandler.inputsList.POP(i)
            ELSE IF self._inputHandler.inputsList[i] = "ALTUP" THEN
                self._alt <-- False
                self._inputHandler.inputsList.POP(i)
            ELSE IF self._inputHandler.inputsList[i] = "CONTROLDOWN" THEN
                self._ctrl <-- True
                self._inputHandler.inputsList.POP(i)
            ELSE IF self._inputHandler.inputsList[i] = "CONTROLUP" THEN
                self._ctrl <-- False
                self._inputHandler.inputsList.POP(i)
            ELSE IF self._inputHandler.inputsList[i] = "BACKSPACEDOWN" THEN
                self._backspace <-- True
                self._timeSinceLastBackspace <-- -200
                FOR box IN self._listOfBoxObjects THEN
                    IF box.isActive THEN
                        box.RemoveLetter(self._ctrl)
                ENDFOR
                self._inputHandler.inputsList.POP(i)
            ELSE IF self._inputHandler.inputsList[i] = "BACKSPACEUP" THEN
                self._backspace <-- False
                self._inputHandler.inputsList.POP(i)
            ELSE THEN
                i <-- i + 1
            ENDIF
        ENDWHILE
    ENDSUBROUTINE
ENDCLASS